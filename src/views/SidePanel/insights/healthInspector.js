import React from "react"
import {
  Card,
  CardBody,
  Button,
  Row,
  Col,
  Badge,
  CardHeader,
  CardTitle,
  ListGroup,
  ListGroupItem,
  Spinner,
} from "reactstrap"
import { PieChart, Pie, ResponsiveContainer, Cell } from "recharts"
import Select from 'react-select'
import { selectThemeColors } from '@utils'
import { useNavigate } from "react-router-dom"
import { useDispatch, useSelector } from "react-redux"
import { useEffect } from "react"
import { healthInspector } from "./store"
import { CHURN_RISK, WALLET_STATUS } from "../../../constant/common"
import { useState } from "react"

const HealthInspector = ({accountTypesOptions}) => {
  // const data = [
  //     { name: 'Group A', value: 400 },
  //     { name: 'Group B', value: 300 },
  //     { name: 'Group C', value: 300 },
  //     { name: 'Group D', value: 200 }
  //   ]

  //   const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042']

  const dispatch = useDispatch()
  const HealthInspectorData = useSelector((state) => state.insights.HealthInspectorDetails)

  const RADIAN = Math.PI / 180
  const renderCustomizedLabel = ({
    cx,
    cy,
    midAngle,
    innerRadius,
    outerRadius,
    percent,
  }) => {
    const radius = innerRadius + (outerRadius - innerRadius) * 0.45
    const x = cx + radius * Math.cos(-midAngle * RADIAN)
    const y = cy + radius * Math.sin(-midAngle * RADIAN)
    return (
      <text
        x={x}
        y={y}
        fill="white"
        textAnchor={x > cx ? "start" : "end"}
        dominantBaseline="central"
      >
        {`${(percent * 100).toFixed(0)}%`}
      </text>
    )
  }

  const [chartData, setChartData] = useState([])
  const [chartColor, setChartColor] = useState([]) 
  const [selectedAccType, setSelectedAccType] = useState("")
  const [WalletStatus, setWalletStatus] = useState(false)

  const navigate = useNavigate()

  useEffect(() => {
    let filterData = []
    let filterColors = []
    HealthInspectorData?.map(health => {
         health?.walletStatus?.map(wallet => {
           WALLET_STATUS.map((x, i) => {
            if(x.id === wallet?._id){
              filterData.push({name: x.value, value: wallet.accounts})
              filterColors.push(x.color)
            }
          })
        })
        if(health?.walletStatus.length > 0){
          setWalletStatus(false)
        } else {
          setWalletStatus(true)
        }
      }) 
      setChartData(filterData)
      setChartColor(filterColors)
  }, [HealthInspectorData])

  const COLORS = ["#FB3E56", "#FF9F43", "#28C76F"]

  const viewAccHandler = () => {
    navigate('/accountExplorer')
  }

  useEffect(() => {
    const obj = {
      "accountTypeId" : selectedAccType
    }
    dispatch(healthInspector(obj))
  }, [])

  const accountChangeHandler = (e) =>{
    setSelectedAccType(e.value)
    const obj = {
      "accountTypeId": e.value
    }
   dispatch(healthInspector(obj))
  } 

  return (
    <div>
      <h2 className="section-title">Health Inspector
      <span className="d-inline-flex daysDropdown"><Select
                placeholder=''
                theme={selectThemeColors}
                className="react-select select-sm"
                classNamePrefix="select"
                options={accountTypesOptions && [...accountTypesOptions, {value: "", label : "All Accounts"}]}
                defaultValue={{value: "", label : "All Accounts"}}
                onChange={(e) => accountChangeHandler(e)}
                // isClearable={true}
              />  </span>
      </h2>
      <Row className="match-height">
        {HealthInspectorData ?  
        <>
        <Col xl="6" md="6" xs="12">
          <Card className="health-inspector-card">
            <CardHeader className="justify-content-start gap-1">
              Health Scores{" "}
              <Button color="outline-primary" className="btn-sm rounded-pill" onClick={viewAccHandler}>
                View Accounts
              </Button>
            </CardHeader>
            <CardBody>
              <ul className="inline-list align-items-center flex-wrap">
              {HealthInspectorData && HealthInspectorData?.map(health => {  
                return health?.healthScore?.length > 0 ? health?.healthScore?.map(score => {
                 return <li>
                  <span className="mb-50 d-block"> 
                  {CHURN_RISK.map((x, i) => {
                        if(x.id === score?._id){
                          return x.img
                        }
                      })}
                  </span>
                  <h4>{score.accounts}</h4>
                  <p className="mb-25">Accounts</p>
                  {CHURN_RISK.map((x, i) => {
                        if(x.id === score?._id){
                          return <Badge className={"badge rounded-pill " + x.class}>
                    {x.value}
                  </Badge>
                        }
                      })}
                </li>
                }) : <p>There are no records to display</p>
              })}
                {/* <li>
                  <span className="mb-50 d-block">
                    <svg
                      width="40"
                      height="30"
                      viewBox="0 0 40 30"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M0.850607 17.9414C0.947378 17.24 1.01821 16.5337 1.14591 15.8374C2.06772 10.8183 4.58875 6.77584 8.67306 3.73605C12.1039 1.1821 15.9947 -0.0380062 20.2676 0.000901508C29.2533 0.0817099 37.1047 6.64315 38.7927 15.4732C38.9303 16.1935 38.9952 16.9278 39.0959 17.654C39.1089 17.7508 39.1378 17.8456 39.1598 17.9414C39.1598 18.7395 39.1598 19.5376 39.1598 20.3357C39.06 21.062 38.9812 21.7912 38.8565 22.5135C38.4784 24.6934 37.7312 26.7435 36.6308 28.6629C36.2676 29.2964 35.6411 29.468 35.0026 29.1049C33.995 28.5333 32.9924 27.9536 31.9928 27.368C31.3942 27.0178 31.2076 26.3534 31.5349 25.7977C31.8511 25.261 32.5125 25.0954 33.1021 25.4246C33.7875 25.8067 34.4629 26.2058 35.1752 26.6158C36.1549 24.6155 36.7206 22.5265 36.8662 20.2698C36.0292 20.2698 35.2341 20.2768 34.44 20.2679C33.7646 20.2599 33.2857 19.7461 33.3176 19.0886C33.3476 18.4851 33.8314 18.0391 34.4978 18.0292C35.269 18.0172 36.0392 18.0262 36.8622 18.0262C36.7276 15.7915 36.1529 13.7174 35.1752 11.6992C34.6505 11.9995 34.1477 12.2868 33.6449 12.5751C33.4393 12.6928 33.2388 12.8205 33.0283 12.9263C32.4726 13.2056 31.8322 13.023 31.5309 12.5073C31.2186 11.9745 31.3812 11.3151 31.9329 10.9789C32.5285 10.6157 33.1391 10.2785 33.7426 9.92836C33.8284 9.87848 33.9102 9.82361 34.0359 9.7438C32.7959 7.89419 31.2625 6.36681 29.4079 5.11478C28.9909 5.83507 28.5998 6.52743 28.1908 7.20981C27.9134 7.67171 27.4356 7.86526 26.9427 7.74754C26.4928 7.63979 26.1177 7.23575 26.1167 6.75788C26.1157 6.4985 26.2005 6.21517 26.3232 5.98372C26.6774 5.3153 27.0714 4.66684 27.4625 3.98745C25.4513 2.99879 23.3672 2.44211 21.1255 2.28948C21.1255 3.10654 21.1305 3.88868 21.1235 4.67083C21.1186 5.2754 20.7504 5.73231 20.2097 5.82509C19.5024 5.9468 18.8958 5.44699 18.8829 4.71273C18.8709 4.03933 18.8799 3.36592 18.8799 2.69252C18.8799 2.57081 18.8799 2.4491 18.8799 2.29147C16.6402 2.43812 14.5601 3.00478 12.5419 3.98745C12.934 4.66584 13.327 5.31231 13.6822 5.98072C13.8049 6.21217 13.8887 6.4955 13.8887 6.75589C13.8887 7.23375 13.5156 7.63879 13.0646 7.74754C12.5838 7.86426 12.1069 7.68269 11.8366 7.24373C11.5034 6.70301 11.1961 6.14633 10.8778 5.59763C10.791 5.44799 10.7032 5.29934 10.5975 5.11877C8.75088 6.36082 7.22649 7.8892 5.96648 9.74879C6.66382 10.1538 7.34122 10.5409 8.01363 10.938C8.50646 11.2293 8.72095 11.7032 8.60123 12.195C8.41866 12.9452 7.61956 13.2834 6.91623 12.8923C6.23185 12.5112 5.55745 12.1112 4.84214 11.6972C3.85149 13.6904 3.2998 15.7735 3.13918 18.0292C3.39956 18.0292 3.63102 18.0292 3.86247 18.0292C4.43611 18.0292 5.00975 18.0162 5.58339 18.0341C6.22886 18.0541 6.69575 18.5409 6.69475 19.1595C6.69375 19.781 6.22786 20.2549 5.57541 20.2688C4.91497 20.2828 4.25354 20.2738 3.5931 20.2738C3.45942 20.2738 3.32574 20.2738 3.14616 20.2738C3.28583 22.5215 3.85748 24.6006 4.83316 26.6168C5.53849 26.2108 6.21988 25.8097 6.91024 25.4226C7.52279 25.0794 8.22014 25.28 8.51144 25.8656C8.76883 26.3824 8.62218 26.9989 8.1084 27.3072C7.0519 27.9427 5.98344 28.5592 4.90499 29.1568C4.36228 29.4581 3.72679 29.2635 3.41453 28.7238C2.21737 26.6527 1.43622 24.433 1.07607 22.0676C0.988281 21.4919 0.924432 20.9123 0.849609 20.3337C0.850607 19.5376 0.850607 18.7395 0.850607 17.9414Z"
                        fill="#28C76F"
                      />
                      <path
                        d="M20.4485 15.0994C20.8299 15.3028 21.2323 15.4778 21.5861 15.7224C21.8004 15.8707 21.9339 15.862 22.1431 15.7404C24.1693 14.5616 26.1991 13.3889 28.2323 12.2224C29.0685 11.742 30.0083 12.251 29.9931 13.1713C29.9854 13.6588 29.7027 13.9662 29.2973 14.1995C27.3294 15.3299 25.3691 16.4747 23.3959 17.5944C23.0888 17.7693 22.9813 17.9315 23.0065 18.3039C23.105 19.7711 22.4921 20.9134 21.2153 21.6237C19.9382 22.335 18.6495 22.2376 17.4459 21.3987C17.2222 21.2427 17.0742 21.2361 16.8563 21.3749C16.4779 21.6154 16.0855 21.8346 15.692 22.0504C15.1002 22.3741 14.4435 22.2116 14.1261 21.6731C13.8038 21.1261 13.9979 20.452 14.5867 20.1007C14.9718 19.8702 15.357 19.6388 15.7545 19.4313C15.973 19.3174 16.0443 19.194 16.0143 18.936C15.7327 16.4716 18.0156 14.5198 20.4485 15.0994Z"
                        fill="#28C76F"
                      />
                      <path
                        d="M20.0304 27.6534C21.1767 27.6534 22.323 27.6504 23.4693 27.6544C24.2355 27.6574 24.7293 28.1053 24.7243 28.7797C24.7203 29.4502 24.2175 29.8971 23.4533 29.8971C21.1358 29.8991 18.8183 29.9001 16.5008 29.8961C15.8573 29.8951 15.3775 29.511 15.2917 28.9503C15.2069 28.3937 15.5331 27.8619 16.0738 27.7063C16.2374 27.6594 16.418 27.6554 16.5906 27.6554C17.7379 27.6514 18.8841 27.6534 20.0304 27.6534Z"
                        fill="#28C76F"
                      />
                    </svg>
                  </span>
                  <h4>2,323</h4>
                  <p className="mb-25">Accounts</p>
                  <Badge className="badge bg-light-success rounded-pill">
                    Healthy
                  </Badge>
                </li>
                <li>
                  <span className="mb-50 d-block">
                    <svg
                      width="39"
                      height="30"
                      viewBox="0 0 39 30"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M0.000997635 17.9414C0.0977682 17.24 0.1686 16.5337 0.296298 15.8374C1.21811 10.8183 3.73914 6.77584 7.82345 3.73605C11.2543 1.1821 15.1451 -0.0380062 19.418 0.000901508C28.4037 0.0817099 36.255 6.64315 37.943 15.4732C38.0807 16.1935 38.1456 16.9278 38.2463 17.654C38.2593 17.7508 38.2882 17.8456 38.3102 17.9414C38.3102 18.7395 38.3102 19.5376 38.3102 20.3357C38.2104 21.062 38.1316 21.7912 38.0069 22.5135C37.6288 24.6934 36.8816 26.7435 35.7812 28.6629C35.418 29.2964 34.7915 29.468 34.153 29.1049C33.1454 28.5333 32.1428 27.9536 31.1432 27.368C30.5446 27.0178 30.358 26.3534 30.6853 25.7977C31.0015 25.261 31.6629 25.0954 32.2525 25.4246C32.9379 25.8067 33.6133 26.2058 34.3256 26.6158C35.3053 24.6155 35.871 22.5265 36.0166 20.2698C35.1796 20.2698 34.3845 20.2768 33.5904 20.2679C32.915 20.2599 32.4361 19.7461 32.468 19.0886C32.498 18.4851 32.9818 18.0391 33.6482 18.0292C34.4194 18.0172 35.1896 18.0262 36.0126 18.0262C35.8779 15.7915 35.3033 13.7174 34.3256 11.6992C33.8009 11.9995 33.2981 12.2868 32.7952 12.5751C32.5897 12.6928 32.3892 12.8205 32.1787 12.9263C31.623 13.2056 30.9825 13.023 30.6813 12.5073C30.369 11.9745 30.5316 11.3151 31.0833 10.9789C31.6789 10.6157 32.2894 10.2785 32.893 9.92836C32.9788 9.87848 33.0606 9.82361 33.1863 9.7438C31.9463 7.89419 30.4129 6.36681 28.5583 5.11478C28.1413 5.83507 27.7502 6.52743 27.3412 7.20981C27.0638 7.67171 26.586 7.86526 26.0931 7.74754C25.6432 7.63979 25.2681 7.23575 25.2671 6.75788C25.2661 6.4985 25.3509 6.21517 25.4736 5.98372C25.8278 5.3153 26.2218 4.66684 26.6129 3.98745C24.6017 2.99879 22.5176 2.44211 20.2759 2.28948C20.2759 3.10654 20.2809 3.88868 20.2739 4.67083C20.2689 5.2754 19.9008 5.73231 19.3601 5.82509C18.6528 5.9468 18.0462 5.44699 18.0332 4.71273C18.0213 4.03933 18.0303 3.36592 18.0303 2.69252C18.0303 2.57081 18.0303 2.4491 18.0303 2.29147C15.7906 2.43812 13.7105 3.00478 11.6923 3.98745C12.0844 4.66584 12.4774 5.31231 12.8326 5.98072C12.9553 6.21217 13.0391 6.4955 13.0391 6.75589C13.0391 7.23375 12.666 7.63879 12.215 7.74754C11.7342 7.86426 11.2573 7.68269 10.987 7.24373C10.6537 6.70301 10.3465 6.14633 10.0282 5.59763C9.94143 5.44799 9.85364 5.29934 9.74789 5.11877C7.90127 6.36082 6.37688 7.8892 5.11687 9.74879C5.81422 10.1538 6.49161 10.5409 7.16402 10.938C7.65685 11.2293 7.87134 11.7032 7.75162 12.195C7.56906 12.9452 6.76995 13.2834 6.06662 12.8923C5.38224 12.5112 4.70784 12.1112 3.99253 11.6972C3.00188 13.6904 2.45019 15.7735 2.28957 18.0292C2.54995 18.0292 2.78141 18.0292 3.01286 18.0292C3.5865 18.0292 4.16014 18.0162 4.73378 18.0341C5.37925 18.0541 5.84614 18.5409 5.84514 19.1595C5.84414 19.781 5.37825 20.2549 4.7258 20.2688C4.06536 20.2828 3.40393 20.2738 2.7435 20.2738C2.60981 20.2738 2.47613 20.2738 2.29656 20.2738C2.43622 22.5215 3.00787 24.6006 3.98356 26.6168C4.68888 26.2108 5.37027 25.8097 6.06063 25.4226C6.67318 25.0794 7.37053 25.28 7.66184 25.8656C7.91922 26.3824 7.77257 26.9989 7.25879 27.3072C6.2023 27.9427 5.13383 28.5592 4.05539 29.1568C3.51267 29.4581 2.87718 29.2635 2.56492 28.7238C1.36776 26.6527 0.586609 24.433 0.226463 22.0676C0.138671 21.4919 0.0748226 20.9123 0 20.3337C0.000997635 19.5376 0.000997635 18.7395 0.000997635 17.9414Z"
                        fill="#FF9F43"
                      />
                      <path
                        d="M16.6114 17.4457C16.9782 17.2171 17.3309 16.9561 17.7196 16.772C17.9552 16.6605 18.0145 16.5406 18.0138 16.2986C18.006 13.9545 18.0053 11.6103 18.0117 9.26615C18.0138 8.30182 18.9245 7.74241 19.7139 8.21576C20.1322 8.46619 20.2571 8.86476 20.2564 9.33246C20.2514 11.6018 20.2627 13.8719 20.2458 16.1406C20.2437 16.494 20.3304 16.6683 20.6655 16.8326C21.9854 17.4809 22.6682 18.5828 22.645 20.0438C22.6224 21.5054 21.8937 22.5728 20.5653 23.1957C20.3184 23.3113 20.2387 23.4362 20.25 23.6944C20.2691 24.1423 20.2627 24.5917 20.2528 25.0404C20.2373 25.7148 19.7682 26.2022 19.1432 26.2079C18.5083 26.2135 18.0215 25.7084 18.0117 25.0227C18.0046 24.5741 17.9969 24.1247 18.0159 23.6768C18.0265 23.4306 17.9552 23.3071 17.7168 23.2041C15.4418 22.2158 14.8929 19.2629 16.6114 17.4457Z"
                        fill="#FF9F43"
                      />
                      <path
                        d="M19.1808 27.6534C20.3271 27.6534 21.4734 27.6504 22.6197 27.6544C23.3859 27.6574 23.8797 28.1053 23.8747 28.7797C23.8707 29.4502 23.3679 29.8971 22.6037 29.8971C20.2862 29.8991 17.9687 29.9001 15.6512 29.8961C15.0077 29.8951 14.5279 29.511 14.4421 28.9503C14.3573 28.3937 14.6835 27.8619 15.2242 27.7063C15.3878 27.6594 15.5684 27.6554 15.741 27.6554C16.8883 27.6514 18.0345 27.6534 19.1808 27.6534Z"
                        fill="#FF9F43"
                      />
                    </svg>
                  </span>
                  <h4>7,465</h4>
                  <p className="mb-25">Accounts</p>
                  <Badge className="badge bg-light-warning rounded-pill">
                    Low Churn Risk
                  </Badge>
                </li>
                <li>
                  <span className="mb-50 d-block">
                    <svg
                      width="39"
                      height="30"
                      viewBox="0 0 39 30"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M0.000997635 17.9414C0.0977682 17.24 0.1686 16.5337 0.296298 15.8374C1.21811 10.8183 3.73914 6.77584 7.82345 3.73605C11.2543 1.1821 15.1451 -0.0380062 19.418 0.000901508C28.4037 0.0817099 36.255 6.64315 37.943 15.4732C38.0807 16.1935 38.1456 16.9278 38.2463 17.654C38.2593 17.7508 38.2882 17.8456 38.3102 17.9414C38.3102 18.7395 38.3102 19.5376 38.3102 20.3357C38.2104 21.062 38.1316 21.7912 38.0069 22.5135C37.6288 24.6934 36.8816 26.7435 35.7812 28.6629C35.418 29.2964 34.7915 29.468 34.153 29.1049C33.1454 28.5333 32.1428 27.9536 31.1432 27.368C30.5446 27.0178 30.358 26.3534 30.6853 25.7977C31.0015 25.261 31.6629 25.0954 32.2525 25.4246C32.9379 25.8067 33.6133 26.2058 34.3256 26.6158C35.3053 24.6155 35.871 22.5265 36.0166 20.2698C35.1796 20.2698 34.3845 20.2768 33.5904 20.2679C32.915 20.2599 32.4361 19.7461 32.468 19.0886C32.498 18.4851 32.9818 18.0391 33.6482 18.0292C34.4194 18.0172 35.1896 18.0262 36.0126 18.0262C35.8779 15.7915 35.3033 13.7174 34.3256 11.6992C33.8009 11.9995 33.2981 12.2868 32.7952 12.5751C32.5897 12.6928 32.3892 12.8205 32.1787 12.9263C31.623 13.2056 30.9825 13.023 30.6813 12.5073C30.369 11.9745 30.5316 11.3151 31.0833 10.9789C31.6789 10.6157 32.2894 10.2785 32.893 9.92836C32.9788 9.87848 33.0606 9.82361 33.1863 9.7438C31.9463 7.89419 30.4129 6.36681 28.5583 5.11478C28.1413 5.83507 27.7502 6.52743 27.3412 7.20981C27.0638 7.67171 26.586 7.86526 26.0931 7.74754C25.6432 7.63979 25.2681 7.23575 25.2671 6.75788C25.2661 6.4985 25.3509 6.21517 25.4736 5.98372C25.8278 5.3153 26.2218 4.66684 26.6129 3.98745C24.6017 2.99879 22.5176 2.44211 20.2759 2.28948C20.2759 3.10654 20.2809 3.88868 20.2739 4.67083C20.2689 5.2754 19.9008 5.73231 19.3601 5.82509C18.6528 5.9468 18.0462 5.44699 18.0332 4.71273C18.0213 4.03933 18.0303 3.36592 18.0303 2.69252C18.0303 2.57081 18.0303 2.4491 18.0303 2.29147C15.7906 2.43812 13.7105 3.00478 11.6923 3.98745C12.0844 4.66584 12.4774 5.31231 12.8326 5.98072C12.9553 6.21217 13.0391 6.4955 13.0391 6.75589C13.0391 7.23375 12.666 7.63879 12.215 7.74754C11.7342 7.86426 11.2573 7.68269 10.987 7.24373C10.6537 6.70301 10.3465 6.14633 10.0282 5.59763C9.94143 5.44799 9.85364 5.29934 9.74789 5.11877C7.90127 6.36082 6.37688 7.8892 5.11687 9.74879C5.81422 10.1538 6.49161 10.5409 7.16402 10.938C7.65685 11.2293 7.87134 11.7032 7.75162 12.195C7.56906 12.9452 6.76995 13.2834 6.06662 12.8923C5.38224 12.5112 4.70784 12.1112 3.99253 11.6972C3.00188 13.6904 2.45019 15.7735 2.28957 18.0292C2.54995 18.0292 2.78141 18.0292 3.01286 18.0292C3.5865 18.0292 4.16014 18.0162 4.73378 18.0341C5.37925 18.0541 5.84614 18.5409 5.84514 19.1595C5.84414 19.781 5.37825 20.2549 4.7258 20.2688C4.06536 20.2828 3.40393 20.2738 2.7435 20.2738C2.60981 20.2738 2.47613 20.2738 2.29656 20.2738C2.43622 22.5215 3.00787 24.6006 3.98356 26.6168C4.68888 26.2108 5.37027 25.8097 6.06063 25.4226C6.67318 25.0794 7.37053 25.28 7.66184 25.8656C7.91922 26.3824 7.77257 26.9989 7.25879 27.3072C6.2023 27.9427 5.13383 28.5592 4.05539 29.1568C3.51267 29.4581 2.87718 29.2635 2.56492 28.7238C1.36776 26.6527 0.586609 24.433 0.226463 22.0676C0.138671 21.4919 0.0748226 20.9123 0 20.3337C0.000997635 19.5376 0.000997635 18.7395 0.000997635 17.9414Z"
                        fill="#FB3E56"
                      />
                      <path
                        d="M15.5753 19.1383C15.6731 18.7173 15.7379 18.2833 15.8826 17.8783C15.9704 17.6329 15.9275 17.5062 15.7559 17.3356C14.0928 15.6835 12.4348 14.0264 10.7817 12.3644C10.1013 11.681 10.3497 10.6414 11.2426 10.418C11.7155 10.2993 12.0856 10.4928 12.4158 10.824C14.017 12.4322 15.6302 14.0294 17.2224 15.6456C17.4708 15.897 17.6554 15.9588 18.0086 15.8381C19.4003 15.3632 20.6623 15.6595 21.6789 16.7091C22.6964 17.7586 22.9359 19.0286 22.4371 20.4083C22.3443 20.6647 22.3762 20.8093 22.5667 20.9839C22.897 21.2872 23.2102 21.6094 23.5205 21.9337C23.9864 22.4215 23.9993 23.0979 23.5614 23.5439C23.1164 23.9968 22.4151 23.9838 21.9233 23.5059C21.601 23.1937 21.2778 22.8814 20.9745 22.5512C20.8079 22.3696 20.6702 22.3327 20.4288 22.4285C18.1213 23.3383 15.6452 21.6384 15.5753 19.1383Z"
                        fill="#FB3E56"
                      />
                      <path
                        d="M19.1808 27.6534C20.3271 27.6534 21.4734 27.6504 22.6197 27.6544C23.3859 27.6574 23.8797 28.1053 23.8747 28.7797C23.8707 29.4502 23.3679 29.8971 22.6037 29.8971C20.2862 29.8991 17.9687 29.9001 15.6512 29.8961C15.0077 29.8951 14.5279 29.511 14.4421 28.9503C14.3573 28.3937 14.6835 27.8619 15.2242 27.7063C15.3878 27.6594 15.5684 27.6554 15.741 27.6554C16.8883 27.6514 18.0345 27.6534 19.1808 27.6534Z"
                        fill="#FB3E56"
                      />
                    </svg>
                  </span>
                  <h4>1,357</h4>
                  <p className="mb-25">Accounts</p>
                  <Badge className="badge bg-light-danger rounded-pill">
                    Likely to Churn
                  </Badge>
                </li> */}
              </ul>
            </CardBody>
          </Card>
        </Col>
        <Col xl="6" md="6" xs="12">
          <Card className="health-inspector-card">
            <CardHeader className="justify-content-start gap-1">
              Wallet Status{" "}
              <Button color="outline-primary" className="btn-sm rounded-pill" onClick={viewAccHandler}>
                View Accounts
              </Button>
            </CardHeader>
            <CardBody>
              <Row className="w-100">
                {WalletStatus ? <p className="text-center">There are no records to display</p> : <>
                <Col lg={5} xl={5} xxl={6}>
                  <ResponsiveContainer>
                    <PieChart>
                      <Pie
                        dataKey="value"
                        isAnimationActive={false}
                        data={chartData}
                        cx="50%"
                        cy="50%"
                        outerRadius={77}
                        fill="#8884d8"
                        label={renderCustomizedLabel}
                        labelLine={false}
                        height={200}
                      >
                        {chartData?.map((entry, index) => (
                        <Cell
                            key={`cell-${index}`}
                            fill={chartColor[index % COLORS.length]}
                          />
                        ))}
                      </Pie>
                    </PieChart>
                  </ResponsiveContainer>
                </Col>
                <Col lg={7} xl={7} xxl={6}>
                  <ListGroup className="list-group-flush wallet-list py-2">
                {HealthInspectorData?.map((health, i) => (            
                  health?.walletStatus?.map(wallet => (
                    <ListGroupItem className="list-group-item px-50 d-flex justify-content-between align-items-center">
                    <div>
                      {WALLET_STATUS?.map((x,i) => {  
                        if(x.id === wallet._id){
                          return <> <span
                          className="bullet bullet-bordered me-50"
                          style={{ backgroundColor: x.color }}
                        ></span>
                        <h6>{x.value}</h6>
                          </> 
                        }                                           
                      }                
                  )}
                    </div>
                    <span className="">{wallet.accounts} Accounts</span>
                  </ListGroupItem>                  
                  )) 
                  ))}
                  </ListGroup>
                </Col>
                </>}
              </Row>
            </CardBody>
          </Card>
        </Col> 
        </> :<div className='d-flex justify-content-center my-1 gap-1'>
        <Spinner size='sm' type='grow' color='primary' />
        <span className=''>Loading...</span>
      </div> }
      </Row>
    </div>
  )
}

export default HealthInspector
